"""This file includes functions that do the behind-the-scenes work of setting
up a Bayes net (to sample host configurations), and generating a graph to represent
host-to-host connections."""

import networkx as nx
import matplotlib.pyplot as plt
from pprint import pprint
from pgmpy.models import BayesianNetwork
from pgmpy.factors.discrete.CPD import TabularCPD


def setup_bayes():
    """This function initializes the bayes net that is used to sample
    host configurations for the attack-graph network.

    Bayes Net Nodes:
        x86_Arch:   Whether the host has x86 architecture (1=x86/0=arm)
              OS:   What operating system the host is running (0=Win, 1=Mac, 2=Lin)
        MS_Teams:   Whether the host has Microsoft Teams installed (1=T/0=F)
        G_Chrome:   Whether the host has Google Chrome installed (1=T/0=F)
             SQL:   Whether the host has SQL installed (1=T/0=F)
         Updated:   Whether the host machine has been recently updated (1=T/0=F)
        Firewall:   Whether the host machine has a firewall (1=T/0=F)

    :return: BayesianNetwork object that can be sampled to create host instances
    """
    # Declare BayesNet object with specified edges
    host_bn = BayesianNetwork([('x86_Arch', 'OS'),
                               ('OS', 'MS_Teams'),
                               ('OS', 'G_Chrome'),
                               ('OS', 'SQL'),
                               ('OS', 'Updated'),
                               ('SQL', 'Updated'),
                               ('OS', 'Firewall')
                               ])

    # Next, we manually assign probabilities to conditional probability tables
    # I've tried to indicate what each row/column represents in the pgmpy format

    # P(x86_Arch)   vals_cardinality â†“    F       T
    cpd_x86 = TabularCPD('x86_Arch', 2, [[0.25], [0.75]])

    # P(OS | x86_Arch)        x86= F    T
    cpd_os = TabularCPD('OS', 3, [[0.2, 0.7],   # P(OS=Windows | x86)
                                  [0.6, 0.2],   # P(OS=Mac | x86)
                                  [0.2, 0.1]],  # P(OS=Linux | x86)
                        evidence=['x86_Arch'], evidence_card=[2])

    # P(MS_Teams | OS)                  OS= Win  Mac  Lin
    cpd_teams = TabularCPD('MS_Teams', 2, [[0.2, 0.6, 0.9],   # P(MS_Teams=False | OS)
                                           [0.8, 0.4, 0.1]],  # P(MS_Teams=True | OS)
                           evidence=['OS'], evidence_card=[3])

    # P(G_Chrome | OS)                   OS= Win  Mac  Lin
    cpd_chrome = TabularCPD('G_Chrome', 2, [[0.2, 0.5, 0.7],   # P(G_Chrome=False | OS)
                                            [0.8, 0.5, 0.3]],  # P(G_Chrome=True | OS)
                            evidence=['OS'], evidence_card=[3])

    # P(SQL | OS)                OS= Win  Mac  Lin
    cpd_sql = TabularCPD('SQL', 2, [[0.5, 0.5, 0.2],   # P(SQL = False | OS)
                                    [0.5, 0.5, 0.8]],  # P(SQL = True | OS)
                         evidence=['OS'], evidence_card=[3])

    # P(Updated | OS, SQL)           OS/SQL= W/F  W/T  M/F  M/T  L/F  L/T
    cpd_updated = TabularCPD('Updated', 2, [[0.8, 0.5, 0.8, 0.6, 0.4, 0.2],   # P(Updated=False | OS, SQL)
                                            [0.2, 0.5, 0.2, 0.4, 0.6, 0.8]],  # P(Updated=True | OS, SQL)
                             evidence=['OS', 'SQL'], evidence_card=[3, 2])

    # P(Firewall | OS)                     OS= Win  Mac  Lin
    cpd_firewall = TabularCPD('Firewall', 2, [[0.6, 0.8, 0.7],  # P(Firewall=False | OS)
                                              [0.4, 0.2, 0.3]],  # P(Firewall=True | OS)
                              evidence=['OS'], evidence_card=[3])

    # Add conditional probability tables to Bayes Net
    host_bn.add_cpds(cpd_x86, cpd_os, cpd_teams, cpd_chrome, cpd_sql, cpd_updated, cpd_firewall)
    return host_bn


def _sample_bayes(bayes_net, n_samples, seed=None, display=False):
    """Helper function that samples the passed Bayes Net object.

    :param bayes_net: The BayesNet to be sampled.
    :param n_samples: The number of samples to bw generated.
    :param seed: The random seed (set to get consistent results across runs).
    :param display: Whether to display the samples in a table.
    :return: Samples as a Pandas dataset.
    """
    samples = bayes_net.simulate(n_samples, seed=seed)
    if display:
        # Order Pandas columns
        samples = samples[['x86_Arch', 'OS', 'MS_Teams', 'G_Chrome', 'SQL', 'Updated', 'Firewall']]
        pprint(samples)
    return samples


def generate_attack_graph(nodes, graph_con_prob, bayes_seed=None, graph_seed=None,
                          start=None, goal=None, display=False):
    """Method used to tie everything together and make an attack graph. We
    return a networkx graph object, where the nodes have custom properties
    corresponding to the output of the host-configuration Bayes net.

    :param nodes: Number of host-nodes to include.
    :param graph_con_prob: The probability of connections between nodes.
    :param bayes_seed: Seed for the random sampling of the host-configuration Bayes net.
    :param graph_seed: Seed for the random generation of the graph network.
    :param start: Optional parameter to specify the start node (By node index 0-n)
    :param goal: Optional parameter to specify the goal node (By node index 0-n)
    :param display: Whether to display attack graph and associated info (host configs).
    :return: The graph object (with custom host-configuration nodes).
    """
    # Initialize the Bayes net to sample host configurations
    host_bn = setup_bayes()
    # Sample the bayes net (with forward sampling) to get configurations
    samples = _sample_bayes(host_bn, nodes, seed=bayes_seed, display=display)

    # Generate random graph to represent network
    graph = nx.erdos_renyi_graph(nodes, graph_con_prob, seed=graph_seed)

    # Now we add the sampled configuration info to the graph nodes.
    # This gives us the final attack graph.
    nodes_list = graph.nodes()
    for i in range(len(nodes_list)):
        nodes_list[i]['x86_Arch'] = samples['x86_Arch'][i]
        nodes_list[i]['OS'] = samples['OS'][i]
        nodes_list[i]['MS_Teams'] = samples['MS_Teams'][i]
        nodes_list[i]['G_Chrome'] = samples['G_Chrome'][i]
        nodes_list[i]['SQL'] = samples['SQL'][i]
        nodes_list[i]['Updated'] = samples['Updated'][i]
        nodes_list[i]['Firewall'] = samples['Firewall'][i]
        # Extra features not generated by Bayes net.
        # If custom start/goal are not included, start=0 and goal=n-1
        nodes_list[i]['Start'] = 1 if i == start or (start is None and i == 0) else 0
        nodes_list[i]['Goal'] = 1 if i == goal or (goal is None and i == nodes - 1) else 0
        # We assume start node is ALWAYS compromised (irrespective of host configuration)
        nodes_list[i]['Compromised'] = 1 if i == start or (start is None and i == 0) else 0

    # If display flag is set, draw graph with colored start/goal nodes (start=red, goal=gold)
    if display:
        colors = []
        nodes_list = graph.nodes()
        for i in range(0, len(nodes_list)):
            if nodes_list[i]['Start'] == 1:
                colors.append('red')
            elif nodes_list[i]['Goal'] == 1:
                colors.append('gold')
            else:
                colors.append('lightblue')
        nx.draw(graph, node_color=colors, with_labels=True)
        plt.show()
    return graph


if __name__ == "__main__":
    # For testing attack graph creation
    ag = generate_attack_graph(10, 0.4, bayes_seed=12, graph_seed=56,
                               start=0, goal=1, display=True)


