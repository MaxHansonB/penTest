"""This file contains some extra functions, mainly used by me for testing
and visualization.
"""

import sorobn as hh
import networkx as nx
import matplotlib.pyplot as plt


def visualize_bayes_net():
    """Uses sorobn package (https://github.com/MaxHalford/sorobn) to create
    a visualization of my bayes net. The strucutre is the same as the bayes net
    declared in graph.py.

    :return: None, but image is created.
    """
    bn = hh.BayesNet(
        ('Architecture', 'Operating System'),
        ('Operating System', ['Microsoft Teams', 'SQL', 'Google Chrome']),
        (['Operating System', 'SQL'], 'Recently Updated'),
        ('Operating System', ' Firewall')
    )
    # Display
    dot = bn.graphviz()
    dot.render('Host configuration', directory='figures', format='svg', cleanup=True)


def view_rand_graph(n, con_prob, seed):
    """This function just runs the networkx random graph function and
    displays the result. It's useful for checking whether a given random
    seed produces a usable (*connected*) graph that can serve as an
    interesting pddl problem.

    :param n: Number of nodes in graph.
    :param con_prob: Probability of connection between nodes.
    :param seed: Random seed for graph creation.
    :return: None, but graph is displayed.
    """
    g = nx.erdos_renyi_graph(n, con_prob, seed=seed)
    nx.draw(g, with_labels=True)
    plt.show()


if __name__ == "__main__":
    visualize_bayes_net()
    # view_rand_graph(20, 0.25, 6)
